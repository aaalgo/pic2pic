#include <utility>
#include "colorize.h"

AB::AB (): W(BINS) {
    a_bin_min = b_bin_min = AB_MAX / BIN_STEP + 1;
    int a_bin_max, b_bin_max;
    a_bin_max = b_bin_max = AB_MIN / BIN_STEP - 1;
    for (unsigned i = 0; i < BINS; ++i) {
        int a = roundf(CC[i][0] / BIN_STEP);
        int b = roundf(CC[i][1] / BIN_STEP);
        if (a < a_bin_min) a_bin_min = a;
        if (a > a_bin_max) a_bin_max = a;
        if (b < b_bin_min) b_bin_min = b;
        if (b > b_bin_max) b_bin_max = b;
    }
    cv::Mat ll(a_bin_max - a_bin_min + 1, b_bin_max - b_bin_min + 1, CV_32S, cv::Scalar(-1));
    for (unsigned i = 0; i < BINS; ++i) {
        int a = roundf(CC[i][0] / BIN_STEP) - a_bin_min;
        int b = roundf(CC[i][1] / BIN_STEP) - b_bin_min;
        ll.at<int>(a, b) = i;
    }
    lookup = ll;
    // weight
    //
    float sum = 0;
    for (int i = 0; i < BINS; ++i) {
        float prior_mix = (1.0 - gamma) * PRIOR[i] + gamma / BINS;
        float prior_factor = powf(prior_mix, -alpha);
        W[i] = prior_factor;
        sum += PRIOR[i] * W[i];
    }
    for (auto &w: W) {
        w /= sum;
    }
}

void AB::encode (float const *ab, float *bins, float *w, std::pair<float, int> *dists) {
    int ai = int(roundf(ab[0]/BIN_STEP)) - a_bin_min;
    int bi = int(roundf(ab[1]/BIN_STEP)) - b_bin_min;
    int constexpr bl = 2 * SEARCH_RADIUS + 1;
    cv::Rect_<int> roi(bi-SEARCH_RADIUS,
                   ai-SEARCH_RADIUS,
                   SEARCH_W, SEARCH_W);
    roi = roi & cv::Rect_<int>(0, 0, lookup.cols, lookup.rows);

    int off = 0;
    for (int i = 0; i < roi.height; ++i) {
        int const *row = lookup.ptr<int const>(roi.y + i) + roi.x;
        for (int j = 0; j < roi.width; ++j) {
            int k = row[j];
            if (k >= 0) {
                float da = ab[0] - CC[k][0];
                float db = ab[1] - CC[k][1];
                dists[off++] = std::pair<float, int>(da*da+db*db, k);
            }
        }
    }
    std::sort(dists, dists + off);
    if (off > K) {
        off = K;
    }
    float sum = 0;
    for (int i = 0; i < off; ++i) {
        auto &v = dists[i];
        v.first = expf(-v.first/sigma_2sqr);
        sum += v.first;
    }
    for (int i = 0; i < off; ++i) {
        auto const &v = dists[i];
        bins[v.second] = v.first / sum;
    }
    if (off > 0) {
        w[0] = W[dists[0].second];
    }
    else {
        w[0] = 0;
    }
}

float const AB::PRIOR[] = {
   		 4.88637077e-08,   1.38517899e-07,   5.76575330e-07,
         2.63933821e-06,   9.50312428e-07,   3.56691466e-08,
         2.53701218e-07,   7.52531286e-07,   1.96176670e-06,
         3.01480592e-06,   4.88644584e-06,   5.64053403e-06,
         1.29429273e-06,   9.36679821e-08,   6.35391447e-07,
         2.24641415e-06,   5.25553580e-06,   8.76607414e-06,
         1.34091655e-05,   1.82779229e-05,   1.60724964e-05,
         7.22202335e-06,   1.19142890e-06,   4.18887782e-07,
         1.88786671e-06,   5.56257122e-06,   1.39430890e-05,
         2.40792026e-05,   3.47403683e-05,   4.82280696e-05,
         6.84466539e-05,   7.22763768e-05,   4.29625157e-05,
         1.64851003e-05,   3.02568434e-06,   7.73805166e-07,
         1.64461151e-05,   4.38741086e-05,   5.87340628e-05,
         8.72316315e-05,   1.18770632e-04,   1.67088961e-04,
         2.63252494e-04,   3.38518453e-04,   2.60347030e-04,
         1.26975045e-04,   4.08961754e-05,   7.22817564e-06,
         1.99693873e-07,   8.92095222e-07,   2.17681063e-05,
         1.12513049e-04,   2.16379538e-04,   2.66030577e-04,
         3.32276125e-04,   5.05886131e-04,   9.30736644e-04,
         1.37460574e-03,   1.22399826e-03,   6.84941967e-04,
         2.66331750e-04,   7.81269159e-05,   1.51248334e-05,
         6.91909015e-07,   7.84442407e-07,   2.60442924e-05,
         1.73225904e-04,   4.26183231e-04,   6.94351438e-04,
         9.10106607e-04,   1.36396435e-03,   2.65613957e-03,
         4.28549468e-03,   4.12207952e-03,   2.46151934e-03,
         1.05696835e-03,   3.65279981e-04,   1.16697960e-04,
         3.93379465e-05,   5.51556883e-06,   2.31736474e-05,
         2.18864360e-04,   7.00249522e-04,   1.39982571e-03,
         2.46769627e-03,   4.12544004e-03,   6.65952684e-03,
         9.48145351e-03,   9.47151961e-03,   6.01423441e-03,
         2.73632660e-03,   1.05931639e-03,   4.24813148e-04,
         2.06608970e-04,   1.12516660e-04,   1.82343798e-05,
         1.29806207e-05,   1.98459648e-04,   1.02348520e-03,
         3.02121005e-03,   6.83473237e-03,   1.91548207e-02,
         4.91089070e-02,   3.73436164e-02,   2.15410263e-02,
         1.19576249e-02,   5.37496020e-03,   2.22045083e-03,
         1.00228369e-03,   5.34522164e-04,   2.98875772e-04,
         1.13312553e-04,   7.14431138e-06,   5.09891097e-06,
         1.17016968e-04,   7.91608776e-04,   2.85160331e-03,
         6.63106003e-03,   1.52823814e-02,   6.42029222e-02,
         2.01234011e-01,   1.08298509e-01,   4.15076383e-02,
         1.65514759e-02,   6.17025338e-03,   2.49037787e-03,
         1.17210899e-03,   6.26213708e-04,   3.19615929e-04,
         7.25174444e-05,   1.56894049e-06,   1.36853721e-06,
         4.80932224e-05,   3.54808240e-04,   1.19859673e-03,
         2.42655886e-03,   3.77852526e-03,   6.61168484e-03,
         1.95601464e-02,   5.31084300e-02,   4.83594842e-02,
         3.27312450e-02,   1.76505654e-02,   7.57483162e-03,
         3.07662489e-03,   1.31642943e-03,   6.08919745e-04,
         2.51085095e-04,   2.98835289e-05,   1.62990511e-05,
         1.50673550e-04,   4.48743165e-04,   8.11259090e-04,
         1.02889008e-03,   1.07089813e-03,   1.19569058e-03,
         2.19157211e-03,   5.41470406e-03,   1.05136718e-02,
         1.22407698e-02,   9.83720010e-03,   5.75596418e-03,
         2.78841071e-03,   1.22907076e-03,   5.18767129e-04,
         1.60173838e-04,   8.73308520e-06,   3.67741205e-06,
         6.01862290e-05,   1.95014172e-04,   3.29027511e-04,
         3.92108962e-04,   3.36467202e-04,   2.87580737e-04,
         3.55864982e-04,   6.00025038e-04,   1.30302957e-03,
         2.94264848e-03,   4.35510075e-03,   4.23253106e-03,
         3.10584698e-03,   1.85082460e-03,   9.27590744e-04,
         3.96521780e-04,   8.90297299e-05,   2.16968519e-06,
         5.71286175e-07,   2.03625835e-05,   9.38233966e-05,
         1.53400572e-04,   1.73289582e-04,   1.39873962e-04,
         1.05413549e-04,   1.24053600e-04,   1.68733854e-04,
         2.72700806e-04,   4.94871924e-04,   9.93266911e-04,
         1.84474766e-03,   2.31814111e-03,   1.80826094e-03,
         1.15884412e-03,   6.29566586e-04,   2.67367592e-04,
         3.98110075e-05,   4.21985639e-07,   4.98443370e-06,
         4.41126865e-05,   8.27534031e-05,   7.93993301e-05,
         5.43451073e-05,   4.12448289e-05,   4.86518392e-05,
         6.68120367e-05,   9.23086078e-05,   1.48979560e-04,
         2.44392940e-04,   4.32722144e-04,   8.18053937e-04,
         1.39190683e-03,   1.54712315e-03,   9.45958739e-04,
         4.47192968e-04,   1.68976619e-04,   1.54429623e-05,
         8.54773467e-07,   1.67927601e-05,   4.30846659e-05,
         3.90191681e-05,   2.08583312e-05,   1.52734877e-05,
         1.76861134e-05,   2.59901753e-05,   3.63725347e-05,
         5.40605908e-05,   8.49764276e-05,   1.25964535e-04,
         1.94377266e-04,   3.54922552e-04,   6.60036129e-04,
         1.02443401e-03,   9.73277882e-04,   4.20818025e-04,
         1.09543742e-04,   5.62733417e-06,   5.84478616e-06,
         2.46368486e-05,   1.78842817e-05,   7.63802784e-06,
         5.27525552e-06,   5.87004194e-06,   9.44847952e-06,
         1.41464633e-05,   1.89742307e-05,   2.83317550e-05,
         4.17858199e-05,   5.53431612e-05,   7.32897293e-05,
         1.17445560e-04,   2.17510161e-04,   3.73459793e-04,
         5.23290004e-04,   3.94743063e-04,   9.10961481e-05,
         2.36171766e-06,   7.43685027e-06,   9.79349898e-06,
         3.56092646e-06,   2.23531626e-06,   2.22702456e-06,
         2.89101214e-06,   5.42782588e-06,   6.57866549e-06,
         8.08947713e-06,   1.07832731e-05,   1.43150989e-05,
         1.61773707e-05,   1.76172387e-05,   2.22420318e-05,
         3.43043821e-05,   5.67338499e-05,   9.24106902e-05,
         1.34054343e-04,   5.91858296e-05,   3.78755066e-07,
         4.58242862e-07,   4.81465701e-07,   6.92722895e-07,
         1.01984763e-06,   2.34830496e-06,   2.92547680e-06,
         2.83353631e-06,   2.48962571e-06,   2.08168930e-06,
         2.12280955e-06,   1.66435596e-06,   1.28913095e-06,
         1.11413320e-06,   1.22927291e-06,   1.59697061e-06,
         2.46489627e-06,   5.07245642e-06,   3.65973502e-06,
         6.07144475e-09,   3.65559565e-08,   2.90157510e-07,
         1.40430462e-06,   6.00511564e-07,   2.64900940e-07,
         1.20902155e-07,   4.78526910e-08,   2.88152932e-08,
         1.45039504e-08};


float const AB::CC[][2] = {
       { -90,   50},
       { -90,   60},
       { -90,   70},
       { -90,   80},
       { -90,   90},
       { -80,   20},
       { -80,   30},
       { -80,   40},
       { -80,   50},
       { -80,   60},
       { -80,   70},
       { -80,   80},
       { -80,   90},
       { -70,    0},
       { -70,   10},
       { -70,   20},
       { -70,   30},
       { -70,   40},
       { -70,   50},
       { -70,   60},
       { -70,   70},
       { -70,   80},
       { -70,   90},
       { -60,  -20},
       { -60,  -10},
       { -60,    0},
       { -60,   10},
       { -60,   20},
       { -60,   30},
       { -60,   40},
       { -60,   50},
       { -60,   60},
       { -60,   70},
       { -60,   80},
       { -60,   90},
       { -50,  -30},
       { -50,  -20},
       { -50,  -10},
       { -50,    0},
       { -50,   10},
       { -50,   20},
       { -50,   30},
       { -50,   40},
       { -50,   50},
       { -50,   60},
       { -50,   70},
       { -50,   80},
       { -50,   90},
       { -50,  100},
       { -40,  -40},
       { -40,  -30},
       { -40,  -20},
       { -40,  -10},
       { -40,    0},
       { -40,   10},
       { -40,   20},
       { -40,   30},
       { -40,   40},
       { -40,   50},
       { -40,   60},
       { -40,   70},
       { -40,   80},
       { -40,   90},
       { -40,  100},
       { -30,  -50},
       { -30,  -40},
       { -30,  -30},
       { -30,  -20},
       { -30,  -10},
       { -30,    0},
       { -30,   10},
       { -30,   20},
       { -30,   30},
       { -30,   40},
       { -30,   50},
       { -30,   60},
       { -30,   70},
       { -30,   80},
       { -30,   90},
       { -30,  100},
       { -20,  -50},
       { -20,  -40},
       { -20,  -30},
       { -20,  -20},
       { -20,  -10},
       { -20,    0},
       { -20,   10},
       { -20,   20},
       { -20,   30},
       { -20,   40},
       { -20,   50},
       { -20,   60},
       { -20,   70},
       { -20,   80},
       { -20,   90},
       { -20,  100},
       { -10,  -60},
       { -10,  -50},
       { -10,  -40},
       { -10,  -30},
       { -10,  -20},
       { -10,  -10},
       { -10,    0},
       { -10,   10},
       { -10,   20},
       { -10,   30},
       { -10,   40},
       { -10,   50},
       { -10,   60},
       { -10,   70},
       { -10,   80},
       { -10,   90},
       { -10,  100},
       {   0,  -70},
       {   0,  -60},
       {   0,  -50},
       {   0,  -40},
       {   0,  -30},
       {   0,  -20},
       {   0,  -10},
       {   0,    0},
       {   0,   10},
       {   0,   20},
       {   0,   30},
       {   0,   40},
       {   0,   50},
       {   0,   60},
       {   0,   70},
       {   0,   80},
       {   0,   90},
       {   0,  100},
       {  10,  -80},
       {  10,  -70},
       {  10,  -60},
       {  10,  -50},
       {  10,  -40},
       {  10,  -30},
       {  10,  -20},
       {  10,  -10},
       {  10,    0},
       {  10,   10},
       {  10,   20},
       {  10,   30},
       {  10,   40},
       {  10,   50},
       {  10,   60},
       {  10,   70},
       {  10,   80},
       {  10,   90},
       {  20,  -80},
       {  20,  -70},
       {  20,  -60},
       {  20,  -50},
       {  20,  -40},
       {  20,  -30},
       {  20,  -20},
       {  20,  -10},
       {  20,    0},
       {  20,   10},
       {  20,   20},
       {  20,   30},
       {  20,   40},
       {  20,   50},
       {  20,   60},
       {  20,   70},
       {  20,   80},
       {  20,   90},
       {  30,  -90},
       {  30,  -80},
       {  30,  -70},
       {  30,  -60},
       {  30,  -50},
       {  30,  -40},
       {  30,  -30},
       {  30,  -20},
       {  30,  -10},
       {  30,    0},
       {  30,   10},
       {  30,   20},
       {  30,   30},
       {  30,   40},
       {  30,   50},
       {  30,   60},
       {  30,   70},
       {  30,   80},
       {  30,   90},
       {  40, -100},
       {  40,  -90},
       {  40,  -80},
       {  40,  -70},
       {  40,  -60},
       {  40,  -50},
       {  40,  -40},
       {  40,  -30},
       {  40,  -20},
       {  40,  -10},
       {  40,    0},
       {  40,   10},
       {  40,   20},
       {  40,   30},
       {  40,   40},
       {  40,   50},
       {  40,   60},
       {  40,   70},
       {  40,   80},
       {  40,   90},
       {  50, -100},
       {  50,  -90},
       {  50,  -80},
       {  50,  -70},
       {  50,  -60},
       {  50,  -50},
       {  50,  -40},
       {  50,  -30},
       {  50,  -20},
       {  50,  -10},
       {  50,    0},
       {  50,   10},
       {  50,   20},
       {  50,   30},
       {  50,   40},
       {  50,   50},
       {  50,   60},
       {  50,   70},
       {  50,   80},
       {  60, -110},
       {  60, -100},
       {  60,  -90},
       {  60,  -80},
       {  60,  -70},
       {  60,  -60},
       {  60,  -50},
       {  60,  -40},
       {  60,  -30},
       {  60,  -20},
       {  60,  -10},
       {  60,    0},
       {  60,   10},
       {  60,   20},
       {  60,   30},
       {  60,   40},
       {  60,   50},
       {  60,   60},
       {  60,   70},
       {  60,   80},
       {  70, -110},
       {  70, -100},
       {  70,  -90},
       {  70,  -80},
       {  70,  -70},
       {  70,  -60},
       {  70,  -50},
       {  70,  -40},
       {  70,  -30},
       {  70,  -20},
       {  70,  -10},
       {  70,    0},
       {  70,   10},
       {  70,   20},
       {  70,   30},
       {  70,   40},
       {  70,   50},
       {  70,   60},
       {  70,   70},
       {  70,   80},
       {  80, -110},
       {  80, -100},
       {  80,  -90},
       {  80,  -80},
       {  80,  -70},
       {  80,  -60},
       {  80,  -50},
       {  80,  -40},
       {  80,  -30},
       {  80,  -20},
       {  80,  -10},
       {  80,    0},
       {  80,   10},
       {  80,   20},
       {  80,   30},
       {  80,   40},
       {  80,   50},
       {  80,   60},
       {  80,   70},
       {  90, -110},
       {  90, -100},
       {  90,  -90},
       {  90,  -80},
       {  90,  -70},
       {  90,  -60},
       {  90,  -50},
       {  90,  -40},
       {  90,  -30},
       {  90,  -20},
       {  90,  -10},
       {  90,    0},
       {  90,   10},
       {  90,   20},
       {  90,   30},
       {  90,   40},
       {  90,   50},
       {  90,   60},
       {  90,   70},
       { 100,  -90},
       { 100,  -80},
       { 100,  -70},
       { 100,  -60},
       { 100,  -50},
       { 100,  -40},
       { 100,  -30},
       { 100,  -20},
       { 100,  -10},
       { 100,    0}};

